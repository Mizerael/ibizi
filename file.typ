#let project(title: "", authors: (), logo: none, body) = {
  set document(author: authors, title: title)
  set page(numbering: "1", number-align: center)

  let body-font = "CMU Serif"
  let sans-font = "CMU Sans Serif"

  set text(font: body-font, lang: "ru")
  show heading: set text(font: sans-font)
  set heading(numbering: "1.1.")

  v(0.6fr)
  if logo != none {
    align(right, image(logo, width: 26%))
  }
  v(9.6fr)

  text(font: sans-font, 2em, weight: 700, title)

  pad(
    top: 0.7em,
    right: 20%,
    grid(
      columns: (1fr,) * calc.min(3, authors.len()),
      gutter: 1em,
      ..authors.map(author => align(start, strong(author))),
    ),
  )

  v(2.4fr)
  pagebreak()

  outline(depth: 2)
  pagebreak()

  set par(justify: true)

  body
}


#show: project.with(
  title: "Отчет по  лабораторным работам по предмету Ибизи",
  authors: (
    "Ковешнииков Даниил 451 группа",
  ),
)
= Лаборатрная работа № 2. Криптография

== Хеш-функции

+ С помощью OpenSSL посчитайте хеш файла с помощью 3-х алгоритмов.

  #image("task2/img/1a.png")

+ Измените один бит в файле и снова посчитайте хеш-значения теми же алгоритмами. 
  Чтобы  изменить бит не обязательно писать программу, можно взять 
  шестнадцатеричный редактор и поменять в нём значения. Взять чётную 
  шестнадцатеричную цифру и увеличить её на один. Или взять текстовый редактор и 
  изменить один символ так, чтобы новый код отличался от предыдущего на один. 
  Лучше всего менять ASCII символы, коды которых можете посмотреть в таблице ASCII.

  #image("task2/img/1b.png")

+ Сильно ли изменились хеш-значения (можно посмотреть количество отличающихся бит, 
  или количество отличающихся символов).
  
  *Сильно*

== Симетричное шифрование

+ Выберите один файлик размером в 1 килобайт или более:

+ Зашифруйте его в режиме простой замены (ECB) и в режиме сцепления блоков (CBC).
  Расшифруйте его. Сравните хеши файла до зашифрования и после расшифрования.

  #image("task2/img/2a.png")
  #image("task2/img/2b.png")

+ Измените в выбранном файлике первый байт и повторите шифрование с тем же самым
  ключом. *Сравните количество различающихся байтов в файлах, зашифрованных в
  одинаковых режимах* #emph(text(red)[(много или мало, если мало, то сколько
  различных
  (сравниваются 1-ый байт 1-го файла с 1-ым байтом 2-го файла, 2-ой байт 1-го
  файла с 2-ым байтом 2-го файла и т.д.).])

  #image("task2/img/2c1.png")
  #image("task2/img/2c2.png")

== Ассиметричное шифрование

+ Сгенерируйте ключи RSA

  #image("task2/img/3a.png")

+ Зашифруйте файл шифром RSA с помощью открытого ключа.

+ Расшифруйте файл шифром RSA с помощью закрытого ключа.

+ Сравните хеши оригинального файла и расшифрованного.

  #image("task2/img/3c.png")

== Электронная цифровая подпись (ЭЦП)

Базовая схема генерации подписи сообщения составляется так: считается хеш-значение
сообщения (файла) и оно зашифровывается с закрытым ключом. Проверка подписи
заключается в расшифровании полученной подписи с помощью открытого ключа и
сравнении с хеш-значением сообщения (файла). Если они равны, то подпись
принимается.

+ Выбрать файл.
+ Подписать его с помощью закрытого ключа RSA.
+ Проверить подпись файла с помощью открытого ключа RSA.
+ Изменить в файле один бит (HEX-редактор в помощь)
+ Проверить подпись файла с помощью открытого ключа RSA.

  #image("task2/img/4a1.png")

+ Сгенерировать параметры DSA.
+ Сгенерировать закрытый ключ DSA.
+ Сгенерировать открытый ключ DSA.

  #image("task2/img/4b.png")

+ Подписать выбранный файл закрытым ключом DSA.
+ Проверить подпись открытым ключом DSA.
+ Изменить один бит в файле.
+ Проверить изменённую подпись открытым ключом DSA.
  #image("task2/img/4c.png")

= Лабораторная работа №3. Атаки на WEB приложения. XSS, CSRF, SQL-инъекции и защита от них.

== Атака SQL-Injection (Внедрение SQL кода)

#image("task3/img/task1.png")
Подумайте, и напишите в отчёте, как от такой атаки защищаться. Ответьте на вопросы:

+ Поможет ли экранирование пришедших извне параметров, и что это вообще такое
  экранирование?
+ Помогут ли "вставки" параметров? То есть запросы вида: SELECT \* FROM table
  WHERE column1=? AND column2=? с последующей подстановкой значений в заранее
  заданные места с помощью специальной функции?
+ Помогут ли для этого специальные библиотеки ORM (Object-Relation Mapping) и
  прочие, которые сами составляют запросы для получения и сохранения объектов
  из/в базу данных?

== Атака XSS (Межсайтовый скриптинг)

+ Напишите комментарий такого содержания: \<script\> alert('Данный сайт подвержен
  XSS атаке'); </script>. Опишите, что случилось?

  #image("task3/img/task2.png")

+ Напишите комментарий такого содержания: <script> alert('Данный сайт подвержен
  XSS атаке'); </script>. Опишите, что случилось?

  #image("task3/img/task3.png")

== Атака CSRF