= Лабораторная работа №3. Атаки на WEB приложения. XSS, CSRF, SQL-инъекции и защита от них.

== Атака SQL-Injection (Внедрение SQL кода)

#image("img/task1.png")
Подумайте, и напишите в отчёте, как от такой атаки защищаться. Ответьте на вопросы:

+ Поможет ли экранирование пришедших извне параметров, и что это вообще такое
  экранирование?
  
  Экранирование в SQL - это процесс замены специальных символов в запросе на 
  эквивалентные им символы, которые не будут интерпретироваться как часть запроса

+ Помогут ли "вставки" параметров? То есть запросы вида: SELECT \* FROM table
  WHERE column1=? AND column2=? с последующей подстановкой значений в заранее
  заданные места с помощью специальной функции?

  Да, использование “вставок” параметров или параметризованных запросов является одним из наиболее эффективных способов защиты от SQL-инъекций. Вместо того чтобы вставлять значения напрямую в запрос, используются знаки вопроса (?) в качестве заполнителей, которые затем заменяются на соответствующие значения с помощью специальной функции.

  Этот подход обеспечивает безопасность, поскольку значения параметров передаются отдельно и не интерпретируются как часть SQL-запроса12. Это означает, что даже если злоумышленник попытается вставить вредоносный код SQL в один из параметров, этот код не будет выполнен12.

+ Помогут ли для этого специальные библиотеки ORM (Object-Relation Mapping) и
  прочие, которые сами составляют запросы для получения и сохранения объектов
  из/в базу данных?

  Да, специальные библиотеки ORM (Object-Relational Mapping) могут помочь в предотвращении SQL-инъекций. Эти инструменты позволяют работать с базой данных через объекты, что уменьшает количество явных SQL-запросов. С их помощью вы можете избежать написания SQL-запросов вручную и потенциально опасных моментов, связанных с SQL-инъекциями.

  Однако, важно отметить, что даже при использовании ORM-библиотек, вам все равно следует быть осторожными и использовать лучшие практики безопасности, такие как использование параметризованных запросов и экранирование входных данных.

== Атака XSS (Межсайтовый скриптинг)

+ Напишите комментарий такого содержания: \<script\> alert('Данный сайт подвержен
  XSS атаке'); </script>. Опишите, что случилось?

  #image("img/task2.png")

+ Попробуйте написать написать нужный комментарий, который перенаправит форму 
  входа со страницы /xss.php на страницу /xss-server.php. Для этого нужно в комментарий вставить JavaScript-код в ```html <script> </script>```, где найти первую форму (тег form, можете использовать ```js document.forms[0]``` в коде JavaScript) и заменить аттрибут action на /xss-server.php. 

  #image("img/task3.png")

  Собственно, в отчёте нужно написать, как можно с этим бороться. Например, как можно убрать весь JS код из строки. Можно ли это сделать экранированием? Ответ вас поразит.
  - Экранирование данных;
  - Валидация данных: Данные, полученные от пользователей, следует проверять на
    соответствие заданным требованиям;
  - ```js str.replace(/<script[^>]*?>.*?<\/script>/gi, '');```

== Атака CSRF

На данном сервере по счастливой случайности такая фильтрация осуществляется только на клиенте. Используя любой инструмент, отличный от браузера, пошлите запрос серверу. Можно использовать программу curl. Запрос POST, укажите отрицательный параметр ammount. Не забудьте про ваши печеньки (cookies), их нужно указать в запросе в заголовке Set-Cookie. Можно посмотреть в браузере. Для входа в инспектор используйте клавишу F12 (или другую с менее стандартными браузерами, уточните сами).

+ Что происходит?

  Происходит отправка на сервер злоумышленником вредоносного запроса на сайте, где аутенцифиуирована жертва.

+ Как защититься от такой атаки? Подумайте или поищите что такое CSRF-токен.

  Использование CSRF-токенов: CSRF-токен -- это случайное значение, генерируемое приложением на стороне сервера и передающееся клиенту. При отправке запроса на выполнение конфиденциального действия, такого как отправка формы, клиент должен включить правильный токен CSRF. В противном случае сервер откажется выполнять запрошенное действие.

  Процесс передачи CSRF-токена обычно происходит следующим образом:

  + Сервер генерирует уникальный токен для каждой сессии пользователя.
  + Токен вставляется в форму в виде скрытого поля.
  + Когда форма отправляется, токен также отправляется вместе с ней.
  + Сервер проверяет токен, полученный от клиента, с токеном, сохраненным на
    сервере. Если они совпадают, запрос считается действительным.
